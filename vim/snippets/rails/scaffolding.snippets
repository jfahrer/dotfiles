snippet rcspec
	require 'rails_helper'

	RSpec.describe {${1:model}}Controller, type: :controller do

	  let(:valid_attributes) {
	    FactoryGirl.attributes_for(:${2:model})
	  }

	  let(:invalid_attributes) {
	    skip('Add a hash of attributes invalid for your model')
	    ${0}
	  }

	  let(:$2) { FactoryGirl.create(:$2) }

	  describe 'GET #index' do
	    it 'assigns all $2s as @$2s' do
	      get :index, {}
	      expect(assigns(:$2s)).to eq([$model])
	    end
	  end

	  describe 'GET #show' do
	    it 'assigns the requested $2 as @$2' do
	      get :show, {:id => $2.to_param}
	      expect(assigns(:$2)).to eq($2)
	    end
	  end

	  describe 'GET #new' do
	    it 'assigns a new $2 as @$2' do
	      get :new, {}
	      expect(assigns(:$2)).to be_a_new($1)
	    end
	  end

	  describe 'GET #edit' do
	    it 'assigns the requested $2 as @$2' do
	      $2 = $1.create! valid_attributes
	      get :edit, {:id => $2.to_param}
	      expect(assigns(:$2)).to eq($2)
	    end
	  end

	  describe "POST #create" do
	    context "filtered params"
	      it { should permit(${3:attributes}).for(:create) }
	    end

	    context "with valid params" do
	      it 'creates a new $1' do
	        expect {
	          post :create, { :$2 => valid_attributes }
	        }.to change($1, :count).by(1)
	      end

	      it 'assigns a newly created $2 as @$2' do
	        $2 :create, { :$2 => valid_attributes }
	        expect(assigns(:$2)).to be_a($1)
	        expect(assigns(:$2)).to be_persisted
	      end

	      it 'redirects to the created $2' do
	        $2 :create, { :$2 => valid_attributes }
	        expect(response).to redirect_to($1.last)
	      end
	    end

	    context "with invalid params" do
	      it 'assigns a newly created but unsaved $2 as @$2' do
	        $2 :create, { :$2 => invalid_attributes }
	        expect(assigns(:$2)).to be_a_new($1)
	      end

	      it 're-renders the "new" template' do
	        $2 :create, { :$2 => invalid_attributes }
	        expect(response).to render_template("new")
	      end
	    end
	  end

	  describe "PUT #update" do
	    context "filtered params"
	      it { should permit(:$3).for(:update) }
	    end

	    context "with valid params" do
	      let(:new_attributes) {
	        skip("Add a hash of attributes valid for your model")
	      }

	      it 'updates the requested $2' do
	        put :update, { :id => $2.to_param, :$2 => new_attributes }
	        $2.reload
	        skip("Add assertions for updated state")
	      end

	      it 'assigns the requested $2 as @$2' do
	        put :update, { :id => $2.to_param, :$2 => valid_attributes }
	        expect(assigns(:$2)).to eq($2)
	      end

	      it 'redirects to the $2' do
	        put :update, { :id => $2.to_param, :$2 => valid_attributes }
	        expect(response).to redirect_to($2)
	      end
	    end

	    context "with invalid params" do
	      it 'assigns the $2 as @$2' do
	        put :update, {:id => $2.to_param, :$2 => invalid_attributes}
	        expect(assigns(:$2)).to eq($2)
	      end

	      it 're-renders the "edit" template' do
	        put :update, {:id => $2.to_param, :$2 => invalid_attributes}
	        expect(response).to render_template("edit")
	      end
	    end
	  end

	  describe "DELETE #destroy" do
	    it 'destroys the requested $2' do
	      expect {
	        delete :destroy, {:id => $2.to_param}
	      }.to change($1, :count).by(-1)
	    end

	    it 'redirects to the $2s list' do
	      delete :destroy, {:id => $2.to_param}
	      expect(response).to redirect_to($2s_url)
	    end
	  end
	end

snippet rroutespec
	require "rails_helper"

	RSpec.describe ${1:controller}, type: :routing do
	  describe "routing" do

	    it 'routes' to #index' do
	      expect(:get => "/${2:path}").to route_to("${3:controller}#index")
	    end

	    it 'routes' to #new' do
	      expect(:get => "/$2/new").to route_to("$3#new")
	    end

	    it 'routes' to #show' do
	      expect(:get => "/$2/1").to route_to("$3#show", :id => "1")
	    end

	    it 'routes' to #edit' do
	      expect(:get => "/$2/1/edit").to route_to("$3#edit", :id => "1")
	    end

	    it 'routes' to #create' do
	      expect(:post => "/$2").to route_to("$3#create")
	    end

	    it 'routes' to #update' do
	      expect(:patch => "/$2/1").to route_to("$3#update", :id => "1")
	    end

	    it 'routes' to #destroy' do
	      expect(:delete => "/$2/1").to route_to("$3#destroy", :id => "1")
	    end

	  end
	end

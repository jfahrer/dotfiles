##########################
#     Rspec snippets     #
##########################
#FactoryGirl snippets
snippet fgc
	FactoryGirl.create(:${1})
snippet fgb
	FactoryGirl.build(:${1})
snippet fgcl
	FactoryGirl.create_list(:${1}, ${2})
snippet fga
	FactoryGirl.attributes_for(:${1})
#New spec snippets
snippet fspec
	require 'rails_helper'

	RSpec.feature '${1}', type: :feature do
	  scenario '${2}' do
	    ${0}
	  end
	end
#

snippet be
	before(:each) do
	  ${1:command}
	end

snippet scen
	scenario "${1}" do
	  ${0}
	end
#
snippet routespec
	require 'rails_helper'

	RSpec.describe ${1:Model}Controller, type: :routing do
	  it 'routes $2 $3 to $4#$5' do
	    expect(${2:get}: '${3:path}').to route_to(controller: '${4:controller}', action: '${5:action}')
	  end
	end
#
snippet itroutes
	it 'routes $1 $2 to $3#$4' do
	  expect(${1:get}: '${2:path}').to route_to(controller: '${3:controller}', action: '${4:action}')
	end
#
snippet vspec
	require 'rails_helper'

	RSpec.describe '${1:controller}/${2:template}', type: :view do
	  it 'should render the template' do
	  	${0}
	    render
	  end
	end
#
snippet cspec
	require 'rails_helper'

	RSpec.describe ${1:Model}Controller, type: :controller do

	  let(:valid_attributes) {
	    FactoryGirl.attributes_for(:${2:model})
	  }

	  let(:invalid_attributes) {
	    skip("Add a hash of attributes invalid for your model")
	  }

	  let(:$2) { FactoryGirl.create(:$2) }

	  describe '${3:GET} #${4:action}' do
	    it '${5:should}' do
	      ${0}
	    end
	  end
	end
#
snippet sspec
	require 'rails_helper'

	RSpec.describe ${1:Name}Service, type: :service do

		let(:service) { $1Service.new }

		it '${0}' do
		end

	end
#
snippet itrenders
	it 'renders the $3 template' do
	  ${1:get} :${2:action}
	  expect(response).to render_template('${3:template}')
	end
#
snippet ithasstatus
	it 'responds with http status $3' do
	  ${1:get} :${2:action}
	  expect(response).to have_http_status(:${3:status})
	end
#
snippet itredirects
	it 'redirects to ${1}' do
	  ${2:get} :${3:action}
	  expect(response).to redirect_to(${4:target})
	end
snippet itassigns
	it 'assigns the $2 as @$2' do
	  ${1:get} :${2:action}
	  expect(assigns(:${1:value})).to eq(${0})
	end
#
snippet mspec
	require "rails_helper"

	RSpec.describe ${1:Model}, type: :model do
	  it '${2:should}' do
	  	$0
	  end
	end
